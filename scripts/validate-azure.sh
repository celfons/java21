#!/bin/bash

# Script de valida√ß√£o para configura√ß√£o Azure
# Verifica se todos os componentes necess√°rios est√£o configurados

set -e

echo "üîç VALIDA√á√ÉO DE CONFIGURA√á√ÉO AZURE"
echo "=================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar comando
check_command() {
    if command -v $1 &> /dev/null; then
        echo -e "${GREEN}‚úì${NC} $1 est√° instalado"
        return 0
    else
        echo -e "${RED}‚úó${NC} $1 n√£o est√° instalado"
        return 1
    fi
}

# Fun√ß√£o para verificar arquivo
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úì${NC} $1 existe"
        return 0
    else
        echo -e "${RED}‚úó${NC} $1 n√£o existe"
        return 1
    fi
}

# Fun√ß√£o para verificar vari√°vel de ambiente
check_env_var() {
    if [ ! -z "${!1}" ]; then
        echo -e "${GREEN}‚úì${NC} $1 est√° definida"
        return 0
    else
        echo -e "${RED}‚úó${NC} $1 n√£o est√° definida"
        return 1
    fi
}

echo "üìã VERIFICANDO DEPEND√äNCIAS LOCAIS:"
echo "-----------------------------------"

# Verificar depend√™ncias
DEPS_OK=true
check_command "docker" || DEPS_OK=false
check_command "az" || echo -e "${YELLOW}‚ö†${NC}  Azure CLI n√£o instalada (opcional para testes locais)"

echo ""
echo "üìÅ VERIFICANDO ARQUIVOS NECESS√ÅRIOS:"
echo "-----------------------------------"

# Verificar arquivos
FILES_OK=true
check_file "Dockerfile" || FILES_OK=false
check_file ".github/workflows/azure-deploy.yml" || FILES_OK=false
check_file ".github/workflows/azure-container-instances.yml" || FILES_OK=false
check_file "docker-compose.azure.yml" || FILES_OK=false
check_file ".env.azure.example" || FILES_OK=false

echo ""
echo "üîß VERIFICANDO CONFIGURA√á√ÉO AZURE LOCAL:"
echo "---------------------------------------"

# Verificar se arquivo .env.azure existe
if [ -f ".env.azure" ]; then
    echo -e "${GREEN}‚úì${NC} .env.azure existe"
    
    # Carregar vari√°veis do .env.azure
    set -a
    source .env.azure
    set +a
    
    # Verificar vari√°veis essenciais
    ENV_OK=true
    check_env_var "ACR_REGISTRY" || ENV_OK=false
    check_env_var "ACR_USERNAME" || ENV_OK=false
    check_env_var "ACR_PASSWORD" || ENV_OK=false
    check_env_var "AZURE_WEBAPP_NAME" || ENV_OK=false
    check_env_var "AZURE_RESOURCE_GROUP" || ENV_OK=false
    check_env_var "MONGODB_ATLAS_CONNECTION_STRING" || ENV_OK=false
    
else
    echo -e "${YELLOW}‚ö†${NC}  .env.azure n√£o existe (opcional para testes locais)"
    echo "    Execute: make azure-env para criar o template"
    ENV_OK=false
fi

echo ""
echo "üéØ VERIFICANDO GITHUB ACTIONS:"
echo "-----------------------------"

# Verificar se workflows s√£o v√°lidos
if [ -f ".github/workflows/azure-deploy.yml" ]; then
    echo -e "${GREEN}‚úì${NC} Workflow principal configurado"
fi

if [ -f ".github/workflows/azure-container-instances.yml" ]; then
    echo -e "${GREEN}‚úì${NC} Workflow ACI configurado"
fi

echo ""
echo "üìö SECRETS NECESS√ÅRIOS NO GITHUB:"
echo "--------------------------------"
echo "  ‚Ä¢ ACR_REGISTRY"
echo "  ‚Ä¢ ACR_USERNAME" 
echo "  ‚Ä¢ ACR_PASSWORD"
echo "  ‚Ä¢ AZURE_CREDENTIALS"
echo "  ‚Ä¢ AZURE_WEBAPP_NAME"
echo "  ‚Ä¢ AZURE_RESOURCE_GROUP"
echo "  ‚Ä¢ MONGODB_ATLAS_CONNECTION_STRING"
echo ""
echo "üîó Configurar em: Settings ‚Üí Secrets and variables ‚Üí Actions"

echo ""
echo "üìä RESULTADO DA VALIDA√á√ÉO:"
echo "========================="

if [ "$DEPS_OK" = true ] && [ "$FILES_OK" = true ]; then
    echo -e "${GREEN}‚úÖ CONFIGURA√á√ÉO OK${NC} - Pronto para deploy no Azure!"
    echo ""
    echo "üöÄ PR√ìXIMOS PASSOS:"
    echo "  1. Configure os secrets no GitHub"
    echo "  2. Fa√ßa push na branch main para deploy autom√°tico"
    echo "  3. Ou use dispatch manual para outros ambientes"
    
    if [ "$ENV_OK" = true ]; then
        echo ""
        echo "üß™ TESTE LOCAL:"
        echo "  make azure-test-local  # Testar configura√ß√£o localmente"
    fi
    
    exit 0
else
    echo -e "${RED}‚ùå CONFIGURA√á√ÉO INCOMPLETA${NC}"
    echo ""
    echo "üîß A√á√ïES NECESS√ÅRIAS:"
    
    if [ "$DEPS_OK" = false ]; then
        echo "  ‚Ä¢ Instalar depend√™ncias faltantes"
    fi
    
    if [ "$FILES_OK" = false ]; then
        echo "  ‚Ä¢ Verificar arquivos de configura√ß√£o"
    fi
    
    echo ""
    echo "üìñ Consulte a documenta√ß√£o: .github/workflows/README.md"
    exit 1
fi