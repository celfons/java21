# Deploy Alternativo para Azure Container Instances
# Este workflow deploy os containers para Azure Container Instances para ambientes de teste/staging

name: 'Deploy para Azure Container Instances'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - development
          - testing

env:
  # Configura√ß√µes do Azure Container Registry
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  
  # Configura√ß√µes do Azure Container Instances
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  ACI_CONTAINER_GROUP_NAME: ${{ secrets.ACI_CONTAINER_GROUP_NAME }}
  
  # Configura√ß√£o do MongoDB Atlas
  MONGODB_ATLAS_CONNECTION_STRING: ${{ secrets.MONGODB_ATLAS_CONNECTION_STRING }}
  
  # Imagens Docker
  KAFKA_CONNECT_IMAGE: kafka-connect-mongodb
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy-aci:
    name: 'Build e Deploy para ACI'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 'Checkout do c√≥digo'
        uses: actions/checkout@v4

      - name: 'Configurar Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Login no Azure Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: 'Build e Push da imagem Kafka Connect'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:${{ github.event.inputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 'Login no Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Criar ou atualizar Container Instance'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            # Verificar se o container group j√° existe
            if az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.ACI_CONTAINER_GROUP_NAME }} > /dev/null 2>&1; then
              echo "Container group existe. Deletando para atualizar..."
              az container delete \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --name ${{ env.ACI_CONTAINER_GROUP_NAME }} \
                --yes
              
              # Aguardar a exclus√£o
              sleep 30
            fi
            
            # Criar novo container group
            echo "Criando novo container group..."
            az container create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.ACI_CONTAINER_GROUP_NAME }} \
              --image ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:${{ env.IMAGE_TAG }} \
              --registry-login-server ${{ env.ACR_REGISTRY }} \
              --registry-username ${{ env.ACR_USERNAME }} \
              --registry-password ${{ env.ACR_PASSWORD }} \
              --dns-name-label ${{ env.ACI_CONTAINER_GROUP_NAME }} \
              --ports 8083 \
              --cpu 2 \
              --memory 4 \
              --environment-variables \
                MONGO_CONNECTION_STRING="${{ env.MONGODB_ATLAS_CONNECTION_STRING }}" \
                CONNECT_BOOTSTRAP_SERVERS="${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}" \
                CONNECT_GROUP_ID="connect-cluster-${{ github.event.inputs.environment }}" \
                CONNECT_CONFIG_STORAGE_TOPIC="connect-configs-${{ github.event.inputs.environment }}" \
                CONNECT_OFFSET_STORAGE_TOPIC="connect-offsets-${{ github.event.inputs.environment }}" \
                CONNECT_STATUS_STORAGE_TOPIC="connect-status-${{ github.event.inputs.environment }}" \
                ENVIRONMENT="${{ github.event.inputs.environment }}" \
                IMAGE_TAG="${{ env.IMAGE_TAG }}"

      - name: 'Aguardar inicializa√ß√£o do container'
        run: sleep 120

      - name: 'Verificar status do container'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            # Obter informa√ß√µes do container
            container_info=$(az container show \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.ACI_CONTAINER_GROUP_NAME }} \
              --query "{state:instanceView.state,fqdn:ipAddress.fqdn,ip:ipAddress.ip}" \
              -o json)
            
            state=$(echo $container_info | jq -r '.state')
            fqdn=$(echo $container_info | jq -r '.fqdn')
            ip=$(echo $container_info | jq -r '.ip')
            
            echo "Estado do container: $state"
            echo "FQDN: $fqdn"
            echo "IP: $ip"
            
            if [ "$state" = "Running" ]; then
              echo "‚úÖ Container est√° executando!"
              echo "üåê URL da aplica√ß√£o: http://$fqdn:8083"
            else
              echo "‚ùå Container n√£o est√° em execu√ß√£o. Estado: $state"
              
              # Mostrar logs para debug
              echo "üìã Logs do container:"
              az container logs \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --name ${{ env.ACI_CONTAINER_GROUP_NAME }}
              
              exit 1
            fi

      - name: 'Teste de conectividade'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            # Obter FQDN do container
            fqdn=$(az container show \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.ACI_CONTAINER_GROUP_NAME }} \
              --query "ipAddress.fqdn" -o tsv)
            
            echo "üîç Testando conectividade com http://$fqdn:8083"
            
            # Tentar conectar na API do Kafka Connect
            for i in {1..10}; do
              if curl -f -s "http://$fqdn:8083/connectors" > /dev/null; then
                echo "‚úÖ API Kafka Connect est√° respondendo!"
                echo "üîó API URL: http://$fqdn:8083"
                break
              else
                echo "‚è≥ Tentativa $i/10 - Aguardando API..."
                sleep 30
              fi
              
              if [ $i -eq 10 ]; then
                echo "‚ùå API n√£o est√° respondendo ap√≥s 5 minutos"
                exit 1
              fi
            done

      - name: 'Relat√≥rio do deploy'
        if: always()
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            # Obter informa√ß√µes finais do container
            container_info=$(az container show \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.ACI_CONTAINER_GROUP_NAME }} \
              --query "{state:instanceView.state,fqdn:ipAddress.fqdn,ip:ipAddress.ip,startTime:instanceView.currentState.startTime}" \
              -o json)
            
            echo "üìä RELAT√ìRIO DO DEPLOY ACI"
            echo "=========================="
            echo "üè∑Ô∏è  Tag da imagem: ${{ env.IMAGE_TAG }}"
            echo "üì¶ Imagem: ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:${{ env.IMAGE_TAG }}"
            echo "üåç Ambiente: ${{ github.event.inputs.environment }}"
            echo "üìç Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
            echo "üì¶ Container Group: ${{ env.ACI_CONTAINER_GROUP_NAME }}"
            echo ""
            echo "Container Info:"
            echo $container_info | jq .
            echo ""
            echo "üîó API URL: http://$(echo $container_info | jq -r '.fqdn'):8083"
            echo "‚è∞ Deploy realizado em: $(date)"