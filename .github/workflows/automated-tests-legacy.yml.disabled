# Automated Testing Workflow
# Runs comprehensive integration tests using Docker Compose on every build

name: 'Automated Integration Tests'

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/azure-*.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/azure-*.yml'
  workflow_dispatch:

env:
  # Test environment configuration
  COMPOSE_PROJECT_NAME: mongodb-kafka-test
  MONGO_REPLICA_SET_NAME: rs0
  MONGO_INITDB_ROOT_USERNAME: admin
  MONGO_INITDB_ROOT_PASSWORD: password123
  
  # Enhanced timeout configuration for CI environment
  HEALTH_CHECK_RETRIES: 8
  HEALTH_CHECK_INTERVAL: 20s
  HEALTH_CHECK_TIMEOUT: 15s
  HEALTH_CHECK_START_PERIOD: 180s
  
  MONGO_INIT_MAX_ATTEMPTS: 120
  MONGO_INIT_SLEEP_INTERVAL: 5
  CONTAINER_CHECK_TIMEOUT: 600
  
jobs:
  integration-tests:
    name: 'Integration Tests with Docker'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
      
    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3
      
    - name: 'Install Required Tools'
      run: |
        sudo apt-get update
        sudo apt-get install -y netcat-traditional jq curl
        
        # Install MongoDB tools for testing
        wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh
        
        # Create docker-compose alias for compatibility with existing scripts
        sudo tee /usr/local/bin/docker-compose > /dev/null << 'EOF'
        #!/bin/bash
        exec docker compose "$@"
        EOF
        sudo chmod +x /usr/local/bin/docker-compose

    - name: 'Create Environment File'
      run: |
        cp .env.example .env
        # Override specific variables for testing environment
        {
          echo "COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}"
          echo "MONGO_REPLICA_SET_NAME=${MONGO_REPLICA_SET_NAME}" 
          echo "MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}"
          echo "MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}"
          echo "HEALTH_CHECK_RETRIES=${HEALTH_CHECK_RETRIES}"
          echo "HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL}"
          echo "HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT}"
          echo "HEALTH_CHECK_START_PERIOD=${HEALTH_CHECK_START_PERIOD}"
          echo "MONGO_INIT_MAX_ATTEMPTS=${MONGO_INIT_MAX_ATTEMPTS}"
          echo "MONGO_INIT_SLEEP_INTERVAL=${MONGO_INIT_SLEEP_INTERVAL}"
          echo "CONTAINER_CHECK_TIMEOUT=${CONTAINER_CHECK_TIMEOUT}"
        } >> .env
        
        echo "=== Environment Configuration ==="
        cat .env
        
    - name: 'Build Custom Docker Images'
      run: |
        echo "Building Kafka Connect custom image..."
        make build
        
    - name: 'Start Services with Docker Compose'
      run: |
        echo "Starting all services..."
        docker compose up -d
        
        echo "Waiting for core services to be healthy..."
        timeout 600 bash -c '
          while true; do
            mongo_status=$(docker compose ps mongo1 --format "table {{.Status}}" | tail -n +2 || echo "not_found")
            kafka_status=$(docker compose ps kafka --format "table {{.Status}}" | tail -n +2 || echo "not_found")
            
            echo "MongoDB: $mongo_status, Kafka: $kafka_status"
            
            if echo "$mongo_status" | grep -q "healthy" && echo "$kafka_status" | grep -q "healthy"; then
              echo "Core services are ready!"
              break
            fi
            
            sleep 15
          done
        '
        
    - name: 'Display Service Status'
      run: |
        echo "=== Docker Compose Services Status ==="
        docker compose ps
        echo ""
        echo "=== Service Logs (last 20 lines each) ==="
        docker compose logs --tail=20
        
    - name: 'Initialize MongoDB Replica Set'
      run: |
        echo "=== MongoDB Initialization Phase ==="
        echo "Timestamp: $(date)"
        
        # Enhanced wait for MongoDB with better logging
        echo "Waiting for MongoDB containers to be fully ready..."
        
        # Check container health first
        echo "Checking Docker container status..."
        docker compose ps
        
        echo "Checking individual container health..."
        for container in mongo1 mongo2 mongo3; do
          echo "Container $container status:"
          docker inspect --format='{{.State.Running}} {{.State.Health.Status}}' $container 2>/dev/null || echo "inspect failed"
          echo "Container $container logs (last 10 lines):"
          docker compose logs --tail=10 $container
          echo "---"
        done
        
        # Wait for mongo-init to complete successfully
        echo "Waiting for mongo-init to complete..."
        timeout 900 bash -c '
          while true; do
            mongo_init_status=$(docker compose ps mongo-init --format "table {{.Status}}" 2>/dev/null | tail -n +2 || echo "not_found")
            echo "mongo-init status: $mongo_init_status"
            
            if echo "$mongo_init_status" | grep -q "Exited (0)"; then
              echo "mongo-init completed successfully!"
              break
            elif echo "$mongo_init_status" | grep -q "Exited ([1-9]"; then
              echo "ERROR: mongo-init failed!"
              docker compose logs mongo-init
              exit 1
            fi
            
            echo "Waiting for mongo-init to complete..."
            sleep 10
          done
        '
        
        # Test MongoDB connectivity after initialization
        echo "Testing MongoDB connectivity after initialization..."
        timeout 300 bash -c '
          attempt=1
          max_attempts=60
          while [ $attempt -le $max_attempts ]; do
            echo "[$attempt/$max_attempts] Testing MongoDB connectivity..."
            
            if docker compose exec -T mongo1 mongosh --username admin --password password123 --authenticationDatabase admin --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; then
              echo "MongoDB authenticated connectivity test passed!"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "ERROR: MongoDB authenticated connectivity test failed after $max_attempts attempts"
              echo "Checking replica set status..."
              docker compose exec -T mongo1 mongosh --username admin --password password123 --authenticationDatabase admin --eval "rs.status()" || true
              exit 1
            fi
            
            echo "Waiting 5s before retry..."
            sleep 5
            ((attempt++))
          done
        '
        
        echo "MongoDB is ready and initialized!"
        
    - name: 'Run Integration Tests'
      run: |
        echo "Running integration tests..."
        make test
        
    - name: 'Test Kafka Connect Setup'
      run: |
        echo "Setting up and testing Kafka Connect MongoDB Source Connector..."
        
        # Wait for Kafka Connect to be fully ready
        echo "Waiting for Kafka Connect to be healthy..."
        timeout 300 bash -c '
          while true; do
            connect_status=$(docker compose ps kafka-connect --format "table {{.Status}}" | tail -n +2)
            echo "Kafka Connect status: $connect_status"
            if echo "$connect_status" | grep -q "healthy"; then
              echo "Kafka Connect is healthy!"
              break
            fi
            sleep 10
          done
        '
        
        # Setup connector
        chmod +x scripts/setup-connector.sh
        ./scripts/setup-connector.sh
        
        # Verify connector is running
        sleep 15
        curl -s http://localhost:8083/connectors | jq .
        
        # Check connector status
        CONNECTORS=$(curl -s http://localhost:8083/connectors)
        if [ "$CONNECTORS" != "[]" ]; then
          echo "Connectors found: $CONNECTORS"
          for connector in $(echo "$CONNECTORS" | jq -r '.[]'); do
            echo "Checking status of connector: $connector"
            curl -s "http://localhost:8083/connectors/$connector/status" | jq .
          done
        else
          echo "No connectors found - this might be expected if setup failed"
        fi
        
    - name: 'Test Data Flow'
      run: |
        echo "Testing data insertion and Kafka message flow..."
        
        # Insert test data into MongoDB
        docker compose exec -T mongo1 mongosh --username admin --password password123 --authenticationDatabase admin --eval "
          use testdb;
          db.users.insertMany([
            {name: 'John Doe', email: 'john@example.com', createdAt: new Date()},
            {name: 'Jane Smith', email: 'jane@example.com', createdAt: new Date()},
            {name: 'Bob Johnson', email: 'bob@example.com', createdAt: new Date()}
          ]);
          print('Inserted test data:');
          db.users.find().forEach(printjson);
        "
        
        # Check if Kafka topics exist
        echo "Checking Kafka topics..."
        docker compose exec -T kafka kafka-topics --bootstrap-server localhost:9092 --list
        
    - name: 'Generate Test Report'
      if: always()
      run: |
        echo "=== Test Execution Summary ==="
        echo "Timestamp: $(date)"
        echo "Git Commit: ${GITHUB_SHA}"
        echo "Branch: ${GITHUB_REF#refs/heads/}"
        echo ""
        echo "=== Final Service Status ==="
        docker compose ps
        echo ""
        echo "=== Resource Usage ==="
        docker stats --no-stream
        
    - name: 'Cleanup'
      if: always()
      run: |
        echo "Stopping and cleaning up services..."
        docker compose down -v
        docker system prune -f