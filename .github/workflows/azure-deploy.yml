# CI/CD Pipeline para Deploy Automatizado no Azure
# Workflow para build e deploy dos containers Docker no Azure Container Registry e Azure Web Apps

name: 'Deploy para Azure'

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  # Configurações do Azure Container Registry
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  
  # Configurações do Azure Web App
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  
  # Configuração do MongoDB Atlas para produção
  MONGODB_ATLAS_CONNECTION_STRING: ${{ secrets.MONGODB_ATLAS_CONNECTION_STRING }}
  
  # Imagens Docker
  KAFKA_CONNECT_IMAGE: kafka-connect-mongodb
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: 'Build e Push para ACR'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
      kafka-connect-image: ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:${{ env.IMAGE_TAG }}
    
    steps:
      - name: 'Checkout do código'
        uses: actions/checkout@v4

      - name: 'Configurar Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Login no Azure Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: 'Build e Push da imagem Kafka Connect'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 'Verificar imagens criadas'
        run: |
          echo "✅ Imagem Kafka Connect: ${{ env.ACR_REGISTRY }}/${{ env.KAFKA_CONNECT_IMAGE }}:${{ env.IMAGE_TAG }}"

  deploy-to-azure:
    name: 'Deploy para Azure Web App'
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 'Checkout do código'
        uses: actions/checkout@v4

      - name: 'Login no Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy do Kafka Connect para Azure Web App'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ needs.build-and-push.outputs.kafka-connect-image }}

      - name: 'Configurar variáveis de ambiente da aplicação'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            # Configurar connection string do MongoDB Atlas
            az webapp config appsettings set \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --settings \
                MONGO_CONNECTION_STRING="${{ env.MONGODB_ATLAS_CONNECTION_STRING }}" \
                CONNECT_BOOTSTRAP_SERVERS="${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}" \
                CONNECT_GROUP_ID="connect-cluster-prod" \
                CONNECT_CONFIG_STORAGE_TOPIC="connect-configs-prod" \
                CONNECT_OFFSET_STORAGE_TOPIC="connect-offsets-prod" \
                CONNECT_STATUS_STORAGE_TOPIC="connect-status-prod" \
                ENVIRONMENT="production" \
                IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"

      - name: 'Restart do Azure Web App'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az webapp restart \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AZURE_WEBAPP_NAME }}

      - name: 'Verificar status do deploy'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            # Aguardar alguns segundos para o restart
            sleep 30
            
            # Verificar status da aplicação
            status=$(az webapp show \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --query "state" -o tsv)
            
            echo "Status da aplicação: $status"
            
            if [ "$status" = "Running" ]; then
              echo "✅ Deploy realizado com sucesso!"
              echo "🌐 URL da aplicação: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
            else
              echo "❌ Erro no deploy. Status: $status"
              exit 1
            fi

      - name: 'Notificação de sucesso'
        if: success()
        run: |
          echo "🚀 Deploy para Azure concluído com sucesso!"
          echo "📦 Imagem: ${{ needs.build-and-push.outputs.kafka-connect-image }}"
          echo "🏷️  Tag: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "🌐 URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"

  health-check:
    name: 'Verificação de Saúde'
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-azure]
    if: always() && needs.deploy-to-azure.result == 'success'
    
    steps:
      - name: 'Aguardar inicialização da aplicação'
        run: sleep 60

      - name: 'Verificar saúde da aplicação'
        run: |
          echo "🔍 Verificando saúde da aplicação..."
          
          # Tentar conectar na API do Kafka Connect
          for i in {1..10}; do
            if curl -f -s "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net:8083/connectors" > /dev/null; then
              echo "✅ Aplicação está respondendo corretamente!"
              echo "🔗 API Kafka Connect: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net:8083"
              exit 0
            else
              echo "⏳ Tentativa $i/10 - Aguardando aplicação..."
              sleep 30
            fi
          done
          
          echo "❌ Aplicação não está respondendo após 5 minutos"
          exit 1

      - name: 'Relatório final'
        if: always()
        run: |
          echo "📊 RELATÓRIO DO DEPLOY"
          echo "======================="
          echo "🏷️  Tag da imagem: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "📦 Imagem Kafka Connect: ${{ needs.build-and-push.outputs.kafka-connect-image }}"
          echo "🌐 URL da aplicação: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "🔗 API Kafka Connect: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net:8083"
          echo "⏰ Deploy realizado em: $(date)"